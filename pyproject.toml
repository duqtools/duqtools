[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
[project]
name = "duqtools"
version = "3.0.1"
description = "Dynamic uncertainty quantification for Tokamak reactor simulations modelling"
readme = "README.md"
requires-python = ">=3.9"
authors = [
	{name = "Stef Smeets", email = "s.smeets@esciencecenter.nl"},
	{name = "Victor Azizi"},
	{name = "Aaron Ho"},
]
keywords = [
    "modelling",
    "uncertainty-quantification",
    "tokamak",
    "fusion-reactor",
]
license = {text = "Apache 2.0 License"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "altair >= 5.0",
    "click",
    "gitpython",
    "imas2xarray >= 0.2.0",
    "importlib_resources; python_version<'3.10'",
    "jetto-tools >= 1.8.8",
    "jinja2 >= 3.0",
    "numpy",
    "pandas",
    "pydantic >= 2.0",
    "pydantic-yaml >= 1.0",
    "scipy >= 1.09",
    "streamlit >= 1.18",
    "tqdm",
    "typing-extensions",
    "xarray",
]

[project.urls]
homepage = "https://github.com/duqtools/duqtools"
issues = "https://github.com/duqtools/duqtools/issues"
documentation = "https://duqtools.readthedocs.io"
changelog = "https://github.com/duqtools/duqtools/releases"

[project.optional-dependencies]
develop = [
    "bump-my-version",
    "ruff",
    "pre-commit",
    "yapf",
    "mypy",
    "coverage[toml]",
    "pytest",
    "pytest-dependency",
]
docs = [
    "jinja2",
    "markdown-include",
    "mkdocs",
    "mkdocs-click",
    "mkdocs-gen-files",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mknotebooks",
]
publishing = [
    "twine",
    "wheel",
    "build",
]
imas = ["imas"]

[project.scripts]
duqtools = "duqtools.cli:cli_entry"
duqduq = "duqtools.large_scale_validation.cli:cli_entry"

[tool.setuptools]
zip-safe = false
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
namespaces = true

[tool.coverage.run]
branch = true
source = ["duqtools"]
concurrency = ["multiprocessing"]
data_file = ".coverage"

[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = ["tests/helpers"]

[tool.mypy]
plugins = "pydantic.mypy"
ignore_missing_imports = true
files = ["duqtools", "tests"]
allow_redefinition = true

[[tool.mypy.overrides]]
module = ["yaml.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pkg_resources.*"]
ignore_missing_imports = true

[tool.yapf]
blank_line_before_nested_class_or_def = "True"

[tool.ruff]
select = [
	"F",    # Pyflakes
	"E",    # pycodestyle (error)
	"W",    # pycodestyle (warning)
	"I",    # isort
]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I"]
unfixable = []

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
    "scripts",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py39"
line-length = 96

[tool.ruff.isort]
known-first-party = ["duqtools"]
required-imports = ["from __future__ import annotations"]

[tool.isort]
profile = "black"

[tool.bumpversion]
current_version = "3.0.1"

[[tool.bumpversion.files]]
filename = "src/duqtools/__init__.py"
search = "__version__ = '{current_version}'"
replace = "__version__ = '{new_version}'"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "CITATION.cff"
search = "version: {current_version}"
replace = "version: {new_version}"
