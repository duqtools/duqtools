import logging
from collections import defaultdict
from math import prod
from pathlib import Path
from string import Template

from ..config import Config
from ..operations import op_queue
from ..utils import read_imas_handles_from_file

logger = logging.getLogger(__name__)

MAX_RUN = 9999

DUMMY_VARS = {
    'TEMPLATE_USER': 'user',
    'TEMPLATE_DB': 'db',
    'TEMPLATE_SHOT': 123,
    'TEMPLATE_RUN': 456,
    'RUN_NAME': 'run_x',
    'RUN_IN_START': 10,
    'RUN_OUT_START': 20,
}


class SetupError(Exception):
    ...


def _generate_run_dir(drc: Path, cfg: str, force: bool):
    drc.mkdir(exist_ok=force, parents=True)

    with open(drc / 'duqtools.yaml', 'w') as f:
        f.write(cfg)


def _get_n_samples(cfg: Config) -> int:
    """Grab number of samples generated by this config, from
    1. `sampler.n_samples`
    2. As a product of the number of dimensions.
    """
    if not cfg.create:
        raise SetupError('Config has no section `create`.')

    try:
        n_samples = cfg.create.sampler.n_samples
    except AttributeError:
        matrix = (model.expand() for model in cfg.create.dimensions)
        n_samples = prod([len(model) for model in matrix])

    return n_samples


def setup(*,
          template_file,
          input_file,
          force,
          min_run_number_to_use: int = 1000,
          **kwargs):
    """Setup large scale validation runs for template.

    Parameters
    ----------
    min_run_number_to_use : int
        Track start run number for each db/shot combination starting
        at 1000
    """
    cwd = Path.cwd()

    if not input_file:
        raise OSError('Input file not defined.')

    handles = read_imas_handles_from_file(input_file)

    with open(template_file) as f:
        template = Template(f.read())

    dummy_cfg = Config.parse_raw(template.substitute(DUMMY_VARS))

    n_samples = _get_n_samples(dummy_cfg)

    run_numbers: dict[tuple[str, int],
                      int] = defaultdict(lambda: min_run_number_to_use)

    any_exists = False

    for name, handle in handles.items():

        run_in_start = run_numbers[handle.db, handle.shot]
        run_out_start = run_in_start + n_samples
        run_numbers[handle.db, handle.shot] = run_out_start + n_samples

        if run_numbers[handle.db, handle.shot] > MAX_RUN:
            raise ValueError(f'Cannot write data with run number > {MAX_RUN}')

        cfg = template.substitute(
            TEMPLATE_USER=handle.user,
            TEMPLATE_DB=handle.db,
            TEMPLATE_SHOT=handle.shot,
            TEMPLATE_RUN=handle.run,
            RUN_NAME=name,
            RUN_IN_START=run_in_start,
            RUN_OUT_START=run_out_start,
        )

        Config.parse_raw(cfg)  # make sure config is valid

        out_drc = cwd / name

        if out_drc.exists() and not force:
            op_queue.add_no_op(description='Directory exists',
                               extra_description=name)
            any_exists = True
        else:
            op_queue.add(
                action=_generate_run_dir,
                kwargs={
                    'drc': out_drc,
                    'cfg': cfg,
                    'force': force
                },
                description='Setup run',
                extra_description=name,
            )

    if any_exists:
        op_queue.add_no_op(description='Not creating run directories',
                           extra_description='Some targets already exist, '
                           'use --force to override')
        return
