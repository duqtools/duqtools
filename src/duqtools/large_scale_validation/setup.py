from __future__ import annotations

import logging
from pathlib import Path
from types import SimpleNamespace
from typing import TYPE_CHECKING

import yaml
from jinja2 import Environment, FileSystemLoader

from ..config import Config
from ..operations import op_queue
from ..utils import no_op, read_imas_handles_from_file

if TYPE_CHECKING:
    import jinja2

    from duqtools.api import ImasHandle

logger = logging.getLogger(__name__)


class SetupError(Exception):
    ...


def get_template(filename: str) -> jinja2.Template:
    """Load filename as a jinja2 template."""
    path = Path(filename)
    drc = Path(path).parent
    file_loader = FileSystemLoader(str(drc))
    environment = Environment(loader=file_loader, autoescape=False)
    return environment.get_template(path.name)


def _get_key(filename: str, *, key: str):
    """Grab key from unrendered config file."""
    with open(filename, 'rb') as f:
        for line in f:
            try:
                item = yaml.safe_load(line)
                return item[key]
            except (yaml.YAMLError, TypeError, KeyError):
                continue


def _generate_run_dir(drc: Path, cfg: str, force: bool):
    drc.mkdir(exist_ok=force, parents=True)

    with open(drc / 'duqtools.yaml', 'w') as f:
        f.write(cfg)


class ExtrasV210921:
    """Track run number to avoid overwriting existing data in sequential
    runs."""
    MAX_RUN = 9999

    def __init__(self, template_file: str):
        self.n_samples = self._get_n_samples(template_file)
        self.current_run_number = 0

    @staticmethod
    def _get_n_samples(template_file: str) -> int:
        """Grab number of samples generated by this config, from
        `create.sampler.n_samples`."""
        n_samples = _get_key(template_file, key='n_samples')

        if not n_samples:
            raise ValueError('`create.sampler.n_samples` must be defined for '
                             'jintrac `v210921` config')

        return n_samples

    def add_system_attrs(self, run: SimpleNamespace):
        """Add system specific attributes to run namespace."""
        data_in_start = self.current_run_number
        data_out_start = data_in_start + self.n_samples
        self.current_run_number = data_out_start + self.n_samples

        if self.current_run_number > self.MAX_RUN:
            raise ValueError(
                f'Cannot write data with run number > {self.MAX_RUN}')

        run.data_in_start = data_in_start
        run.data_out_start = data_out_start


def get_ids_variables(handle: ImasHandle) -> SimpleNamespace:
    """Grabs some values from the imas handle."""
    e = handle.get('equilibrium')
    t_start = e['time'][0]

    for path in (
            'vacuum_toroidal_field/r0',
            'time_slice/0/global_quantities/magnetic_axis/r',
    ):
        r0 = e[path]
        if r0 and abs(r0) < 1e40:
            major_radius = r0
            break

    for path in (
            'vacuum_toroidal_field/b0',
            'time_slice/0/global_quantities/magnetic_axis/b_field_tor',
    ):
        b0 = e[path]
        if b0 and abs(b0) < 1e40:
            b_field = b0[0]
            break

    return SimpleNamespace(t_start=t_start,
                           b_field=b_field,
                           major_radius=major_radius)


def setup(*, template_file, input_file, force, **kwargs):
    cwd = Path.cwd()

    if not input_file:
        raise OSError('Input file not defined.')

    handles = read_imas_handles_from_file(input_file)

    template = get_template(template_file)

    if _get_key(template_file, key='system') == 'jetto-v210921':
        extra_params = ExtrasV210921(template_file)
        add_system_attrs = extra_params.add_system_attrs
    else:
        add_system_attrs = no_op  # default to no-op

    for name, handle in handles.items():
        run = SimpleNamespace(name=name)

        add_system_attrs(run)
        variables = get_ids_variables(handle)

        cfg = template.render(run=run, variables=variables, handle=handle)

        Config.parse_raw(cfg)  # make sure config is valid

        out_drc = cwd / name

        op_queue.add(
            action=_generate_run_dir,
            kwargs={
                'drc': out_drc,
                'cfg': cfg,
                'force': force
            },
            description='Setup run',
            extra_description=name,
        )
